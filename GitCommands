UNTRACKED     MODIFIED    STAGGED     COMMIT

{
	git config --global --list --> Get the list of all configuration
	git config --global user.name <userName> --> set the user name globally
	git config --global user.email <userEmail> --> set the user's email globally
	git config --global user.password <token> --> set token for repo access
	git config --global credential.username <username> --> The default username for credential storage.
}

{
	git init --> First You must have to initialize the git in the working tree
	git branch -M master --> Command for forcefully rename the branch to master
	git remote add origin https://github.com/username/reponame.git
	git clone <URL>
}

{
	git status 		        --> shows the status of current working tree 
	git status -s   			--> shows the short status of current working tree
}

{
	git add <file> 		    --> Too add file/to Stage a file 
	git add -A 		        --> Add all the files in the current working tree 
	git add . 		        --> Add all the files in the current working tree 
}

{
	NOTE: You must have to add a message
	git commit -m "comment" 		--> Commit all STAGED files with message
	git commit -a -m "comment"  --> STAGE all files and COMMIT
}

{
	git checkout <file>   --> Discard all the changes in a file
	git checkout . 		    --> Discard all the changes in the current working tree 
	git checkout -f       --> Forcefully discard all the changes in the current working tree 
}

{
	git log               --> Shows history of all commits
	git log -p -5         --> Shows history of last five commits
	type q to exit log window
}

{
	git diff              --> Shows the differences between previous STAGGED file and current MODIFIED file
	git diff --staged     --> Compares STAGED File with Last COMMIT
}

{
	git rm <file>           --> Remove the file from the staging area and also from working tree
	git rm --cached <file>  --> file will be removed from staging area only 
}

{
	touch .gitignore        --> Creates .gitignore file which used to ignore the file
		example.txt 					--> ignores the specified file
		*.<extension> 				--> ignore all files which start with this extension
		<folderName>/* 				--> ignores everything present in the folder
}

{
	NOTE: You must have to commit atleast once to see the branches
	git branch              --> To see all branches and working branch
	git branch <name>       --> Creates new branch
	git checkout <name>     --> Switch to other branch
	git merge <name>        --> Merges branch with current working branch
	git checkout -b <name>  --> Makes new branch and switched into that branch
}

{
	git remote     								--> Command to manage remote repository
	git remote add 								--> SubCommand used to add new remote
	NOTE: origin is just a name for your remote repository. We can add multiple remote repositories
	git remote add origin <url>   --> Add origin with URL of remote repository
	git remote set-url origin <new_url> --> Set new URL of remote repository
	git remote -v                 --> Shows all the remote repositories url

	git push -u origin <branch>   --> It pushes branch to remote location and [-u or --set-upstream flag set it for default remote location when location is not specified for git pull/push command]
	git push                      --> Command used to push local branch to remote location 
}

Contribute_To_Other_Repo {
	1. Fork the Repository: {
    Go to the GitHub page of the original repository.
    Click the "Fork" button in the top right corner of the page.
    This creates a copy of the repository under your GitHub account.
	}

	2. Clone Your Fork Locally: {
    Clone your forked repository to your local machine using the following command:
		git clone https://github.com/your-username/repository.git
	}

	3. Create a New Branch: {
    Create a new branch in your local repository to work on your changes:
	}

	4. Make Changes Locally: {
    Make and commit your changes locally on the new branch.
	}

	5. Push Changes to Your Fork on GitHub: {
    Push your changes to your fork on GitHub:
		git push origin feature-branch
	}

	6. Create a Pull Request: {
    Go to your forked repository on GitHub.
    GitHub will usually prompt you to create a pull request (PR) for your recently pushed branch.
    If not, navigate to the "Pull Requests" tab and click on "New Pull Request."
    Select the base branch (the branch you want to merge into, usually the default branch of the original repository).
	}

	7. Submit the Pull Request: {
    Write a descriptive title and comment for your pull request.
    Click "Create Pull Request" to submit your changes.
	}

	8. Request Review and Merge: {
    If you don't have write access to the original repository, a project collaborator or maintainer will need to review and merge your pull request.
    They may provide feedback or ask for changes before merging.
	}
}